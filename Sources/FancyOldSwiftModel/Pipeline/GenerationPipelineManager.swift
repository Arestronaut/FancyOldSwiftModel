import Foundation

/// Manages the creation of the generation piplines
final class GenerationPipelineManager {
    static let global: GenerationPipelineManager = .init()

    /// Creates one or more pipelines if a model should be generated by a template file
    ///
    /// - Parameter generateFromTemplateArgument: The object containing neccessary information about the tempaltes
    func queue(generateFromTemplateArgument: GenerateFromTemplateArgument) {
        let templateURLs: [URL] = InputFileExtractor.extractInputFiles(from: generateFromTemplateArgument)

        for templateURL in templateURLs {
            GenerationPipeline().run(with: templateURL, output: generateFromTemplateArgument.modelPath.url)
        }
    }

    /// Creates one pipeline for a provided inline model
    ///
    /// - Parameter generateModelArgument: The object containing the inline model template
    func queue(generateModelArgument: GenerateModelArgument) {
        guard generateModelArgument.model.isValid else { return Console.print(.error, "The provided inline model is invalid") }

        Console.print(.status, "Starting generation for: %@", generateModelArgument.identifier)

        let swiftModel = SwiftModelFactory.map(from: generateModelArgument)

        let sourceFileWriter = SourceFileWriter(modelsURL: generateModelArgument.outputURL, swiftModel: swiftModel)

        sourceFileWriter.onResult = { result in
            switch result {
            case let .failure(error):
                Console.print(.error, "Writing Source file: %@", error.localizedDescription)

            case .success:
                Console.print(.status, "Successfully generated model")
            }
        }

        let queue = OperationQueue()
        queue.addOperations([sourceFileWriter], waitUntilFinished: true)
    }
}
